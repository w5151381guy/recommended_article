{
  "version": "https://jsonfeed.org/version/1",
  "title": "StarBugs Weekly",
  "home_page_url": "https://starbugs-blog.netlify.app",
  "feed_url": "https://starbugs-blog.netlify.app/feed/feed.json",
  "description": "StarBugs Weekly",
  "author": {
    "name": "StarBugs Weekly",
    "url": ""
  },
  "items": [{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/",
      "title": "第108期 Rust 推薦文章",
      "content_html": "<h2 id=\"rust\"><a class=\"direct-link\" href=\"#rust\">#</a> Rust</h2>\n<!-- summary -->\n<h3 id=\"supercharge-your-nodejs-with-rust\"><a class=\"direct-link\" href=\"#supercharge-your-nodejs-with-rust\">#</a> <a href=\"https://skwee357.medium.com/supercharge-your-nodejs-with-rust-f78952d2fa8\">Supercharge your NodeJS with Rust</a></h3>\n<p>Rust 開發起來很慢，光是要成功編譯就不行，但執行速度非常的快；而 Node.js 則是開發起來很快，但執行速度相對就慢很多。那有什麼什麼方法可以將兩者結合起來呢？這篇文章介紹了 Neon，他可以幫你把 Rust 程式碼編譯成 native Node.js module，這樣你就可以把最需要效能的地方用 Rust 寫，接著 Node.js 裡面使用它就能兼顧開發效率跟效能囉</p>\n<!-- summary -->\n<h3 id=\"what-rust-could-learn-from-kotlin\"><a class=\"direct-link\" href=\"#what-rust-could-learn-from-kotlin\">#</a> <a href=\"https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d\">What Rust could learn from Kotlin</a></h3>\n<p>這十多年來程式語言如雨後春筍般不斷推陳出新，像 Kotlin、Swift、Golang 這些語言其實都設計得不錯。而這篇文章就比較了 Rust 跟 Kotlin 的語法，並指出 Rust 有哪些可以跟 Kotlin 借鏡的地方。如果你跟我一樣也喜歡看看每個語言的優缺點的話，這篇文章真的很不錯</p>\n<h3 id=\"rust-lang-tips-and-tricks\"><a class=\"direct-link\" href=\"#rust-lang-tips-and-tricks\">#</a> <a href=\"https://mudit.blog/rust-tips-and-tricks/\">Rust lang Tips and Tricks</a></h3>\n<p>這篇文章介紹了一些 Rust 的小技巧，像是怎麼用 <code>dbg!</code> macro 來輸出變數、用底線來讓數字更好讀等等，如果才剛開始學習 Rust 還不太熟悉一些語法糖，可以簡單看一看這篇文章～</p>\n",
      "date_published": "2021-11-23T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/",
      "title": "第108期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C\"><a class=\"direct-link\" href=\"#react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C\">#</a> <a href=\"https://chentsulin.medium.com/react-%E7%9A%84%E6%9C%AA%E4%BE%86-18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C-d5764e258deb\">React 的未來：18 以及在那之後</a></h3>\n<p>這篇文章的作者先前有在 JSDC 2021 分享過 <a href=\"https://2021.jsdc.tw/timesheets\">The Future of React: 18 and Beyond</a>，然後又很佛的把議程的內容另外寫成一篇文章分享，雖然 React 18 目前還在 beta 狀態，但還是可以先看看 React 18 新 feature 的概念。'</p>\n<!-- summary -->\n<h3 id=\"creating-a-react-custom-hook-using-tdd\"><a class=\"direct-link\" href=\"#creating-a-react-custom-hook-using-tdd\">#</a> <a href=\"https://dev.to/mbarzeev/creating-a-react-custom-hook-using-tdd-2o\">Creating a React Custom Hook using TDD</a></h3>\n<p>作者用 TDD 的方式設計一個 Custom Hook 用來管理分頁 Component 的背後邏輯，每一步操作都有很清楚的說明，雖然文章篇幅很長，但如果想要學習測試還是很推薦看完！</p>\n<h3 id=\"functional-programming%3A-immutability\"><a class=\"direct-link\" href=\"#functional-programming%3A-immutability\">#</a> <a href=\"https://rehansattar.dev/functional-programming-immutability\">Functional Programming: Immutability</a></h3>\n<p>Immutability（不變性） 在 Functional Programming 中是個相當重要的觀念，作者用簡單的例子示範什麼是 Immutability 的概念，並清楚的解釋 Immutability 帶來的好處和壞處。</p>\n",
      "date_published": "2021-11-23T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/activities/20211120-devopsday-2021/",
      "url": "https://starbugs-blog.netlify.app/posts/activities/20211120-devopsday-2021/",
      "title": "DevOpsDays Taipei 2021",
      "content_html": "<p>DevOpsDays Taipei 2021 即將在 2021/11/24 於臺北文創盛大舉辦，Agile <a href=\"http://Community.tw\">Community.tw</a>、DevOps Taiwan Community、HashiCorp User Group Taipei 以及 iThome 再次攜手合作，期盼再創屬於臺灣在地的 DevOps 高峰盛會。</p>\n<h2 id=\"devopsdays-taipei\"><a class=\"direct-link\" href=\"#devopsdays-taipei\">#</a> DevOpsDays Taipei</h2>\n<!-- summary -->\n<p>DevOpsDays Taipei 是由臺灣在地技術社群發起，結合社群、企業共同舉辦之年度 DevOps 盛會。DevOpsDays 由 DevOps 之父 Patrick Debois 發源自比利時，經過全球社群的共同響應，如今在全球，每年皆有多個城市舉辦以城市掛名的 DevOpsDays。</p>\n<p>根據 iThome 的報導，不論是國內外的知名企業例如台積電、金士頓、趨勢科技、國泰金控等皆早已擁抱 DevOps，引領企業持續改善、邁向新一波的 IT 數位轉型。DevOps 作為同時蘊含技術與文化轉型雙主軸的 IT 熱門關鍵字，其影響力已不僅是 IT 圈內人人皆知，更擴展至企業組織的各個層面。</p>\n<!-- summary -->\n<h3 id=\"%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E\"><a class=\"direct-link\" href=\"#%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E\">#</a> 您絕對不能錯過</h3>\n<p>臺灣今年度最大場 DevOpsDays 官方授權活動<br>\n專業技術論壇、解決方案 Demo、實機體驗工作坊讓您值回票價<br>\n囊括最多產業案例及導入實戰分享<br>\n議程後還有專家面對面時間讓您與大神近距離討教</p>\n<p><a href=\"https://devopsdays.tw/\">DevOpsDays TW 活動頁面</a></p>\n",
      "date_published": "2021-11-20T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/",
      "title": "第107期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management\"><a class=\"direct-link\" href=\"#announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management\">#</a> <a href=\"https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/\">Announcing Grafana OnCall, the easiest way to do on-call management</a></h3>\n<p>在維運服務時，系統總是會有遇到問題需要求救的時候，設定一個彈性又有效的 On Call 輪值方式是相當重要的一件事情，很多既有的工具使用起來要嘛很麻煩，要嘛對於開發者來說很不友善，所以 Grafana 宣布推出簡單易用的 Grafana On Call 管理工具，用來降低管理 On Call 輪值所需要的功夫，目前在 Grafana Cloud 為 Beta 公測階段；Grafana On Call 主要是透過今年所收購 Amixr Inc 所開發出來的，而他主要有以下三個特點：</p>\n<!-- summary -->\n<ul>\n<li>簡單建立跟管理 On-Call 時程</li>\n<li>利用自動逐步升級 (Escalation)且彈性的引導方式 (Routing) 確保找到人協助系統問題</li>\n<li>讓 On-Call 與 Incidnet 的狀態在同一個 UI 中顯現管理</li>\n</ul>\n<h3 id=\"terraform-cloud-variable-sets-beta-now-available\"><a class=\"direct-link\" href=\"#terraform-cloud-variable-sets-beta-now-available\">#</a> <a href=\"https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available\">Terraform Cloud Variable Sets Beta Now Available</a></h3>\n<p>Terraform 的 Module 引用方式讓使用者可以一直重複利用既有的程式碼，而不需要重新造輪子，而現在 Terraform Cloud 針對變數也推出一樣的功能 - <code>variable sets</code>，他讓使用者可以重複使用 Terraform 所定義或是環境變數，而且不止是從 Root 到 Child Module，還可以橫跨某些 Workspaces 甚至是 Organization；自己發現 Terragrunt 也有類似的功能，看來 Terraform 這邊也跟上來了</p>\n<h3 id=\"flux-security-audit-has-concluded\"><a class=\"direct-link\" href=\"#flux-security-audit-has-concluded\">#</a> <a href=\"https://www.cncf.io/blog/2021/11/11/flux-security-audit-has-concluded/\">Flux Security Audit has concluded</a></h3>\n<p>CNCF 最近對旗下 Incubation Project 進行 Security Audit，做完馬上發現一個 CVE: CVE-2021-41254，可以讓有心人士可以在 Multi-Tenant Flux 提權成 Cluster Admin (有使用 Flux 的人要記得升級)，而整個詳細的<a href=\"https://fluxcd.io/FluxFinalReport-v1.1.pdf\">稽核報告</a>已經被公開在網路上，找到將近 22 條涵括各種不同的 Risk Level 的問題，目前 43% 的 Issue 在 TODO 階段，21% WIP，36% 已經修完，詳細的進度可以參考 <a href=\"https://github.com/orgs/fluxcd/projects/5\">GitHub Project</a>，看起來 Flux 從另外一個面向投入資源，試圖跟其他的 GitOps 競爭工具做出差異化</p>\n",
      "date_published": "2021-11-16T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/",
      "title": "第107期 Go 推薦文章",
      "content_html": "<h2 id=\"go\"><a class=\"direct-link\" href=\"#go\">#</a> Go</h2>\n<!-- summary -->\n<h3 id=\"upcoming-features-in-go-1.18\"><a class=\"direct-link\" href=\"#upcoming-features-in-go-1.18\">#</a> <a href=\"https://sebastian-holstein.de/post/2021-11-08-go-1.18-features/\">Upcoming Features in Go 1.18</a></h3>\n<p>除了泛型之外，預計在明年發布的 Go 1.18 其實還有一些其他 feature，像是用來做測試的 fuzzing、聽說（？）更快的 go fmt，還有新的 net/netip package，看完都等不及要開始用了</p>\n<!-- summary -->\n<h3 id=\"best-practices-for-testing-in-go\"><a class=\"direct-link\" href=\"#best-practices-for-testing-in-go\">#</a> <a href=\"https://fossa.com/blog/golang-best-practices-testing-go/\">Best Practices for Testing in Go</a></h3>\n<p>這篇文章除了跟你說在寫測試時有哪些該注意的重點之外，也教你怎麼把 function/struct 設計得更好測試，如果你最近想寫 unit test 來增加程式的可靠性，卻發現不知道從何著手，那可以參考看看這篇文章</p>\n<h3 id=\"design-patterns-in-go\"><a class=\"direct-link\" href=\"#design-patterns-in-go\">#</a> <a href=\"https://refactoring.guru/design-patterns/go\">Design Patterns in Go</a></h3>\n<p>如果想要從 Go 下手開始學習設計模式的話，這邊有一個很不錯的網站，他除了會把每個 pattern 畫成 UML 圖之外，還會給你非常實際的範例，對於理解 pattern 的應用場景非常有幫助</p>\n",
      "date_published": "2021-11-16T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/",
      "title": "第107期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"useref-or-usestate%2C-which-is-better%3F\"><a class=\"direct-link\" href=\"#useref-or-usestate%2C-which-is-better%3F\">#</a> <a href=\"https://dev.to/salehmubashar/useref-or-usestate-which-is-better-258j\">useRef or useState, which is better?</a></h3>\n<p>雖然 <code>useRef</code> 或 <code>useState</code> 都可以存放想要的東西，在使用上貌似滿雷同的，但其實兩者對 Component render 的影響可是完全不一樣的！會分享這篇文章也是我突然想到 <a href=\"https://swr.vercel.app/\">SWR</a> 就是利用 <code>useRef</code> 來存放 state 唷！</p>\n<!-- summary -->\n<h3 id=\"writing-clean-code-in-javascript\"><a class=\"direct-link\" href=\"#writing-clean-code-in-javascript\">#</a> <a href=\"https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874\">Writing Clean Code in JavaScript</a></h3>\n<p>JavaScript 在近幾年真的提供了很多方便的寫法，只要善用就可以讓程式碼變得更簡潔，當然同時也出現了各種古怪的寫法 😂，在使用上還是要考慮到之後的人容不容易看懂。</p>\n<h3 id=\"react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86\"><a class=\"direct-link\" href=\"#react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86\">#</a> <a href=\"https://juejin.cn/post/7030700352622034952\">react-router-dom 6.x 版本 让我🐓 🐝 了</a></h3>\n<p>最近在研究 React 的專案配置時，一如往常地裝了 react-router-dom，然後依照記憶寫下程式碼，結果在執行後卻發現錯誤狂噴，原來是 react-router-dom 更新到 v6 後，一堆寫法都變了，而今天又看到這篇文章就覺得不分享不行，希望之後的人少走一點坑。</p>\n",
      "date_published": "2021-11-16T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/",
      "title": "第107期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F\">#</a> <a href=\"https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/?fbclid=IwAR2mOQnLA0NF7ukl8XLSBe03Ft2-F9qZR_8l9yj9Mg9H_LcKaCnmZ3FdE0Q\">該如何入門 CTF 中的 Web 題？</a></h3>\n<p>CTF 一直是個很有趣的比賽，參賽者必須要想辦法在網頁上尋找相對應的 flag 或者讓網頁產生一些奇怪的行為，雖然自己身為一位前端工程師但玩了 CTF 才知道自己原來對前端這麼不熟，想要一起了解 CTF 是甚麼的讀者歡迎閱讀這篇文章，之後就可以慢慢摸索一些 CTF 的練習題了！</p>\n<!-- summary -->\n<h3 id=\"custom-elements-defining-new-elements-in-html\"><a class=\"direct-link\" href=\"#custom-elements-defining-new-elements-in-html\">#</a> <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/customelements/\">Custom Elements defining new elements in HTML</a></h3>\n<p>原來 HTML tag 是可以自己隨便定義一個出來的，不一定要是 HTML5 中規範的 tag，其實會突然分享這個文章也是因為上面的 CTF 有些技巧是需要用到這種手段才能達到的，所以假如讀者不知道 HTML tag 可以自己自定義的話也可以看看這篇文章，裡面都有一些作者對於自定義 tag 的見解。</p>\n<h3 id=\"css-tricks-to-create-that-dark-futuristic-web3-look\"><a class=\"direct-link\" href=\"#css-tricks-to-create-that-dark-futuristic-web3-look\">#</a> <a href=\"https://dev.to/trishathecookie/css-tricks-to-create-that-dark-futuristic-web3-look-53bm\">CSS Tricks to Create that Dark Futuristic Web3 Look</a></h3>\n<p>這個真的太酷了，沒想到 CSS 還有這麼多的玩法可以讓一個文字有這麼多不同的顯示方式，學會了這些技巧就不用擔心設計師突然設計出一個難以開發的樣式了XD</p>\n",
      "date_published": "2021-11-16T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/",
      "title": "第106期 DevOps 推薦文章",
      "content_html": "<h2 id=\"devops\"><a class=\"direct-link\" href=\"#devops\">#</a> DevOps</h2>\n<!-- summary -->\n<h3 id=\"just-7-remarkable-k8s-tools-boosting-up-your-effectiveness\"><a class=\"direct-link\" href=\"#just-7-remarkable-k8s-tools-boosting-up-your-effectiveness\">#</a> <a href=\"https://getbetterdevops.io/7-essential-tools-to-be-more-efficient-on-kubernetes/\">Just 7 Remarkable K8S Tools Boosting Up Your Effectiveness</a></h3>\n<p>Kubernetes 是目前負責管理 Container 和微服務的的主要平台，一般人在開始學習跟 K8s 互動時都是透過 <code>kubectl</code>，它的確也真的扮演著很重要的角色，不過不知道使用者是否發現透過他一直在重複著一樣的動作，因而浪費掉寶貴的時間，所以這篇文章要介紹 7 個可以幫助使用者增進效率的工具：</p>\n<!-- summary -->\n<ol>\n<li><a href=\"https://github.com/cloudnativelabs/kube-shell\">Kube-shell</a>: 透過顯示豐富的資訊和提示來減少使用 kubectl 時可能產生的錯誤並且加快操作速度</li>\n<li><a href=\"https://github.com/ahmetb/kubectx\">Kubectx - Kubens</a>: 管理 Multi-Cluster 的必備工具，協助使用者切換不同的 Cluster</li>\n<li><a href=\"https://github.com/johanhaleby/kubetail\">Kubetail</a>: 功能有點像是 <code>kubectl logs -f</code>，但可以一次將多個 Pod 的 Log 同時顯示</li>\n<li><a href=\"https://github.com/ahmetb/kubectl-tree\">Kubetree</a>: K8s 的某些資源間其實是有親子關係的，透過此工具可以將資源間的關係視覺化呈現出來</li>\n<li><a href=\"https://github.com/derailed/k9s\">K9S</a>: K9S 應該就不用多說了，強大的 K8s Terminal UI，讓你可以輕易地與 K8s Cluster 互動</li>\n<li><a href=\"https://github.com/robscott/kube-capacity\">Kube-Capacity</a>: 顯示 K8s Cluster 中 Resource 的 Request, Limit 和使用程度</li>\n<li><a href=\"https://k8slens.dev/\">Lens</a>: Lens 應該也是大家都耳熟能響的 K8s UI 工具，可以運行在各種系統中 (Windows, Linux 和 Mac)，讓使用者可以透過類似 IDE 的感覺來跟 K8s 互動</li>\n</ol>\n<h3 id=\"compliance-in-a-devops-culture\"><a class=\"direct-link\" href=\"#compliance-in-a-devops-culture\">#</a> <a href=\"https://martinfowler.com/articles/devops-compliance.html\">Compliance in a DevOps Culture</a></h3>\n<p>將 Compliance Control 和 Audit 整合進 CI/CD 的流程，對於想要在 DevOps 文化中滿足 Security Compliance 是滿直覺的作法，但根據不同的組織大小會遭遇到不同的挑戰，了解透過不同的實作方式所可能造成的影響是導致成功與否的重要關鍵，文中從理論開始談起 (講解得很細)，隨後提到各種模式，例如：Manual Compliance, Pipeline Compoiance, Composition Compliance 和 Point-of-Change Compliance，對於這塊領域有興趣的人可以參考看看</p>\n<h3 id=\"anatomy-of-a-terminal-emulator\"><a class=\"direct-link\" href=\"#anatomy-of-a-terminal-emulator\">#</a> <a href=\"https://www.poor.dev/blog/terminal-anatomy/\">Anatomy of a Terminal Emulator</a></h3>\n<p>Terminal 是一個無所不在的平台，多年來一直相當穩定地存在著，雖然目前有大量的資源可以用來理解 Terminal 的內部運作方式，但其中大多數要嘛相當的神秘，或是需要特定領域的深入知識，所以這篇文章希望提供一個平易近人且相對廣泛容易了解的內容，來讓大家知道要開發一個 Terminal Emulator 平台時需要具備的知識</p>\n",
      "date_published": "2021-11-09T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/",
      "title": "第106期 Testing 推薦文章",
      "content_html": "<h2 id=\"testing\"><a class=\"direct-link\" href=\"#testing\">#</a> Testing</h2>\n<!-- summary -->\n<h3 id=\"%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0\"><a class=\"direct-link\" href=\"#%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0\">#</a> <a href=\"https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing\">一次搞懂單元測試、整合測試、端對端測試之間的差異</a></h3>\n<p>大家都知道測試可以確保程式的正確性，但根據不同的目的，測試又可大略分成單元測試、整合測試、端對端測試三種，因此在真的開始寫測試之前，務必要先搞清楚你需要的是哪種測試，才不會花了一堆時間結果沒測到最重要的部分哦～</p>\n<!-- summary -->\n<h3 id=\"what's-in-a-story%3F\"><a class=\"direct-link\" href=\"#what's-in-a-story%3F\">#</a> <a href=\"https://dannorth.net/whats-in-a-story/\">What's in a Story?</a></h3>\n<p>身為工程師，在跟 PM 溝通需求時最怕的就是 PM 以為他講清楚了，工程師也以為自己聽懂了，結果做出來後得到的回覆卻是「這不是我要的！」。所以在真的開始實作之前，雙方可以用 User Story 把各種 scenario 一一列出來，雙方都同意之後這些 scenario 也可以直接寫成測試，真的是非常省時間的一套方法</p>\n<h3 id=\"mocks-and-explicit-contracts\"><a class=\"direct-link\" href=\"#mocks-and-explicit-contracts\">#</a> <a href=\"http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/\">Mocks and explicit contracts</a></h3>\n<p>寫測試寫到一定程度之後，為了方便建立測試專用的環境，一定會需要用到 mock。而這篇文章雖然已經是多年前發表的，但我覺得他在講怎麼正確使用 mock 講得非常好，尤其是他內文有講到 mock 應該當作名詞而非動詞來用，看完之後覺得又更了解怎麼用 mock 跟 interface 了</p>\n",
      "date_published": "2021-11-09T00:00:00-00:00"
    },{
      "id": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/",
      "url": "https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/",
      "title": "第106期 前端開發 推薦文章",
      "content_html": "<h2 id=\"%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC\">#</a> 前端開發</h2>\n<!-- summary -->\n<h3 id=\"creating-a-react-component-with-tdd\"><a class=\"direct-link\" href=\"#creating-a-react-component-with-tdd\">#</a> <a href=\"https://dev.to/mbarzeev/creating-a-react-component-with-tdd-2jn8\">Creating a React component with TDD</a></h3>\n<p>看那麼多文章說了什麼是單元測試、什麼是 TDD 或是該如何對 Component 用 TDD 開發，這篇文章的作者直接示範了整個 TDD 開發 Component 的流程，很適合剛接觸測試、不知道如何對 Component 做測試或是想用測試改變開發方式的讀者們一讀！</p>\n<!-- summary -->\n<h3 id=\"understanding-the-box-model-in-css\"><a class=\"direct-link\" href=\"#understanding-the-box-model-in-css\">#</a> <a href=\"https://dev.to/yamanidev/understanding-the-box-model-in-css-1af\">Understanding The Box Model in CSS</a></h3>\n<p>CSS 的屬性那麼多，真的不需要全部都記起來，只需要在用到的時候去搜尋相關的語法就行了，<strong>但是這並不代表你可以忽略那些在 CSS 中的重要觀念</strong>，這篇文章的作者講解了 CSS 的 Box Model（盒子模型），Box Model 是 CSS 非常重要的基本觀念，如果還不熟悉的話就快來看看這篇文章吧！</p>\n<h3 id=\"javascript-programming-styles%3A-best-practices\"><a class=\"direct-link\" href=\"#javascript-programming-styles%3A-best-practices\">#</a> <a href=\"https://www.ma-no.org/en/programming/javascript/javascript-programming-styles-best-practices\">JavaScript Programming Styles: Best Practices</a></h3>\n<p>不知道大家有沒有在使用 ESLint 等工具在檢查你的程式碼風格，除了一些客製化的部分，比較常見的其他應該是 <a href=\"https://google.github.io/styleguide/jsguide.html\">Google</a> 和 <a href=\"https://github.com/airbnb/javascript\">AirBnb</a> ，這裡我就不戰哪種風格比較優秀，不如先來看看作者選擇每種寫法的差異和理由吧！或許也能想想自己除了習慣外為什麼選擇了某種風格！</p>\n",
      "date_published": "2021-11-09T00:00:00-00:00"
    }
  ]
}
