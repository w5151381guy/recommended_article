<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>StarBugs Weekly</title>
	<subtitle>StarBugs Weekly</subtitle>
	
	<link href="https://starbugs-blog.netlify.app/feed/feed.xml" rel="self"/>
	<link href="https://starbugs-blog.netlify.app"/>
	<updated>2021-11-30T00:00:00-00:00</updated>
	<id>https://starbugs-blog.netlify.app/</id>
	<author>
		<name>StarBugs Weekly</name>
		<email></email>
	</author>
	
	<entry>
		<title>COSCUP 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20210731-COSCUP-2021/"/>
		<updated>2021-07-31T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20210731-COSCUP-2021/</id>
		<content type="html">
		  &lt;p&gt;&lt;a href=&quot;https://coscup.org/2021/zh-TW/&quot;&gt;COSCUP 2021 | Conference for Open Source Coders, Users, and Promoters&lt;/a&gt;&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BC-coscup&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BC-coscup&quot;&gt;#&lt;/a&gt; 關於 COSCUP&lt;/h2&gt;
&lt;p&gt;COSCUP 是由台灣開放原始碼社群聯合推動的年度研討會，起源於 2006 年，是台灣自由軟體運動 (FOSSM) 重要的推動者之一。活動包括有講座、攤位、社團同樂會等，除了邀請國際的重量級演講者之外，台灣本土的自由軟體推動者也經常在此發表演說，會議的發起人、工作人員與講者都是志願參與的志工。COSCUP 的宗旨在於提供一個聯結開放原始碼開發者、使用者與推廣者的平台。希望藉由每年一度的研討會，來推動自由及開放原始碼軟體 (FLOSS)。由於有許多贊助商及熱心捐助者，所有議程都是免費參加，但因會場人數限制，通常在一開放網路報名後就會立刻額滿。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;開放原始碼 (Open source) 是在 1998 年出現的名詞，大家早已耳熟能詳。這種在網路上已經進行二、三十年的軟體開發模式之所以能成功，有許多原因。其中一個極為關鍵的因素，就是開發者與使用者的直接接觸。無屏障的交流加速了問題的回報和修補機制，而當這個機制被網路效應放大到極限時，Linus 定律就出現了：「臭蟲難逃眾人法眼」(With enough eyeballs, all bugs are shallow)，軟體品質因此顯著提昇。在開放原始碼的模式中，開發者和使用者中間的人不再是銷售員或客服，而是讓軟體更容易被接受的推廣者 (Promoters)，他們打包套件讓軟體更好裝、寫說明文件讓軟體更易學、辦推廣活動讓更多人接觸到好軟體、在網路上回答問題解決使用者的疑惑，而且不會把開發者藏在背後產生資訊的不對稱。&lt;/p&gt;
&lt;p&gt;開發者 (Coders)、使用者 (Users) 和推廣者 (Promoters) 是讓自由及開放原始碼軟體發光發熱的三大支柱，這個研討會就是專為這三種人舉辦的：你可以是 A 軟體的開發者、B 軟體的推廣者、C 軟體的使用者，不論你是已經踏入自由及開放原始碼軟體領域，還是一直站在門口不知如何入門，歡迎你來參加 COSCUP — Conference for Open Source Coders, Users and Promoters!&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>PyCon Taiwan 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20211002-PyCon-2021%20copy/"/>
		<updated>2021-10-02T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20211002-PyCon-2021%20copy/</id>
		<content type="html">
		  &lt;h2 id=&quot;pycon-taiwan&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#pycon-taiwan&quot;&gt;#&lt;/a&gt; PyCon Taiwan&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;持續舉辦 9 年&lt;/li&gt;
&lt;li&gt;每年議程 30 場以上&lt;/li&gt;
&lt;li&gt;參與會眾 800 人以上&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PyCon，亦即 Python 年會，是全球 Python 社群的年度盛會。PyCon 由各地同好自發籌辦，而現在台灣也有自己的 Python 年會了。這個活動旨在聚集台灣各領域應用 Python 的組織與個人，交流彼此的經驗心得，分享最新的技術發展，並親身體驗社群獨有的熱情。&lt;/p&gt;
&lt;p&gt;2021 年是 PyCon Taiwan 的十周年，今年 PyCon Taiwan 除了傳承十年來的社群交流經驗，我們更做了一些新嘗試，像是 Podcast 等。以期 PyCon Taiwan 十周年能促進不同族群間的交流，激盪出不一樣的火花。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>ModernWeb 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20211012-ModernWeb-2021/"/>
		<updated>2021-10-12T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20211012-ModernWeb-2021/</id>
		<content type="html">
		  &lt;p&gt;&lt;a href=&quot;https://modernweb.ithome.com.tw/&quot;&gt;ModernWeb&#39;21 VIRTUAL EVENT&lt;/a&gt;&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;身為企業 Web 開發者，除了要鍛鍊本職學能、培養扎實的 Web 開發技術底蘊外，必須切記技術的發展日新月異，因此在 Web 開發這一行，不可能老是憑著相同一招半式打天下。Web 開發人員需要學習更新穎、更多元也更精深的技術，且遍佈開發語言、架構設計、框架應用、敏捷管理流程，甚至是實作技巧等眾多環節。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;p&gt;立即報名參加「ModernWeb&#39;21 VIRTUAL EVENT」，我們以 Web 週規畫了多場精彩講座議程，讓 Web 技術大神們來幫您醍醐灌頂、打通任督二脈，在網路技術的浩瀚銀河創造更多的可能性！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>MOPCON 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20211023-MOPCON-2021/"/>
		<updated>2021-10-23T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20211023-MOPCON-2021/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E6%88%91%E5%80%9110%E6%AD%B2%E5%9B%89&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%88%91%E5%80%9110%E6%AD%B2%E5%9B%89&quot;&gt;#&lt;/a&gt; 我們10歲囉&lt;/h2&gt;
&lt;p&gt;_Growing With You&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mopcon.org/2021/&quot;&gt;行動科技年會 2021 | Mobile / Open / Platform Conference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mopcon.org/2021/schedule&quot;&gt;主要議程 | MOPCON 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mopcon.org/2021/speaker&quot;&gt;講者陣容 | MOPCON 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E5%A0%85%E6%8C%81%E5%8D%81%E5%B9%B4%EF%BC%8C%E5%BE%88%E3%80%8C%E5%8D%97%E3%80%8D&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A0%85%E6%8C%81%E5%8D%81%E5%B9%B4%EF%BC%8C%E5%BE%88%E3%80%8C%E5%8D%97%E3%80%8D&quot;&gt;#&lt;/a&gt; 堅持十年，很「南」&lt;/h2&gt;
&lt;p&gt;MOPCON (Mobile Open Platform Conference) 堅持濁水溪以南的行動科技年會，南台灣千人軟體圈盛事。時逢第十周年，秉持著 Growing with you 精神與您一同成長，今年主題聚焦 Mobile 與 AIoT，期待能邀請老朋友和新同學，我們線上見！&lt;/p&gt;
&lt;!-- summary --&gt;
		</content>
	</entry>
	
	<entry>
		<title>JSDC 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20211030-JSDC-2021/"/>
		<updated>2021-10-30T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20211030-JSDC-2021/</id>
		<content type="html">
		  &lt;!-- summary --&gt;
&lt;h2 id=&quot;javascript-%E9%96%8B%E7%99%BC%E8%80%85%E5%B9%B4%E6%9C%83&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#javascript-%E9%96%8B%E7%99%BC%E8%80%85%E5%B9%B4%E6%9C%83&quot;&gt;#&lt;/a&gt; JavaScript 開發者年會&lt;/h2&gt;
&lt;p&gt;JSDC 打破了壁壘，整合來自獨立開發者、企業、組織及機構的科技力量。&lt;/p&gt;
&lt;p&gt;我們致力於知識全球化，並讓參與者重新認識 JavaScript。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://2021.jsdc.tw/&quot;&gt;JSDC 2021 - 歡迎參加主年會&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://2021.jsdc.tw/timesheets&quot;&gt;JSDC 2021 - 大會議程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://2021.jsdc.tw/speakers&quot;&gt;JSDC 2021 - 講者介紹&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- summary --&gt;
&lt;h2 id=&quot;%E9%97%9C%E6%96%BCjsdc&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E9%97%9C%E6%96%BCjsdc&quot;&gt;#&lt;/a&gt; 關於JSDC&lt;/h2&gt;
&lt;p&gt;JavaScript 開發者年會 (JavaScript Developer Conference，簡稱 JSDC) 是台灣最大的 JavaScript 年度性技術研討會， 旨在提供台灣中高階 JavaScript 技術人才與世界最新 JavaScript 相關技術討論與分享。&lt;br&gt;
JSDC 由 2011 年底開始，由三個台灣開發者社群共同發起，近年各式開發者社群蓬勃發展Front-End Developer、 &lt;a href=&quot;http://angular.tw/&quot;&gt;Angular.tw&lt;/a&gt;、 &lt;a href=&quot;http://reactjs.tw/&quot;&gt;ReactJS.tw&lt;/a&gt; 等新興社群⼀⼀成立， 我們期許 JSDC 能成為每年網⾴技術開發者的中⾼階技術交流活動，整合來自獨立開發者、企業、組織及機構的科技力量，並致力於知識全球化，讓參與者重新認識 JavaScript。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 106 期 前端開發 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/"/>
		<updated>2021-11-09T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/gqsm-106/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;creating-a-react-component-with-tdd&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#creating-a-react-component-with-tdd&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/mbarzeev/creating-a-react-component-with-tdd-2jn8&quot;&gt;Creating a React component with TDD&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;看那麼多文章說了什麼是單元測試、什麼是 TDD 或是該如何對 Component 用 TDD 開發，這篇文章的作者直接示範了整個 TDD 開發 Component 的流程，很適合剛接觸測試、不知道如何對 Component 做測試或是想用測試改變開發方式的讀者們一讀！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;understanding-the-box-model-in-css&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#understanding-the-box-model-in-css&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/yamanidev/understanding-the-box-model-in-css-1af&quot;&gt;Understanding The Box Model in CSS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CSS 的屬性那麼多，真的不需要全部都記起來，只需要在用到的時候去搜尋相關的語法就行了，&lt;strong&gt;但是這並不代表你可以忽略那些在 CSS 中的重要觀念&lt;/strong&gt;，這篇文章的作者講解了 CSS 的 Box Model（盒子模型），Box Model 是 CSS 非常重要的基本觀念，如果還不熟悉的話就快來看看這篇文章吧！&lt;/p&gt;
&lt;h3 id=&quot;javascript-programming-styles%3A-best-practices&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#javascript-programming-styles%3A-best-practices&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.ma-no.org/en/programming/javascript/javascript-programming-styles-best-practices&quot;&gt;JavaScript Programming Styles: Best Practices&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不知道大家有沒有在使用 ESLint 等工具在檢查你的程式碼風格，除了一些客製化的部分，比較常見的其他應該是 &lt;a href=&quot;https://google.github.io/styleguide/jsguide.html&quot;&gt;Google&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;AirBnb&lt;/a&gt; ，這裡我就不戰哪種風格比較優秀，不如先來看看作者選擇每種寫法的差異和理由吧！或許也能想想自己除了習慣外為什麼選擇了某種風格！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 106 期 Testing 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/"/>
		<updated>2021-11-09T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/larry-106/</id>
		<content type="html">
		  &lt;h2 id=&quot;testing&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#testing&quot;&gt;#&lt;/a&gt; Testing&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E3%80%81%E6%95%B4%E5%90%88%E6%B8%AC%E8%A9%A6%E3%80%81%E7%AB%AF%E5%B0%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6%E4%B9%8B%E9%96%93%E7%9A%84%E5%B7%AE%E7%95%B0&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing&quot;&gt;一次搞懂單元測試、整合測試、端對端測試之間的差異&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;大家都知道測試可以確保程式的正確性，但根據不同的目的，測試又可大略分成單元測試、整合測試、端對端測試三種，因此在真的開始寫測試之前，務必要先搞清楚你需要的是哪種測試，才不會花了一堆時間結果沒測到最重要的部分哦～&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;what&#39;s-in-a-story%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#what&#39;s-in-a-story%3F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dannorth.net/whats-in-a-story/&quot;&gt;What&#39;s in a Story?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;身為工程師，在跟 PM 溝通需求時最怕的就是 PM 以為他講清楚了，工程師也以為自己聽懂了，結果做出來後得到的回覆卻是「這不是我要的！」。所以在真的開始實作之前，雙方可以用 User Story 把各種 scenario 一一列出來，雙方都同意之後這些 scenario 也可以直接寫成測試，真的是非常省時間的一套方法&lt;/p&gt;
&lt;h3 id=&quot;mocks-and-explicit-contracts&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#mocks-and-explicit-contracts&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/&quot;&gt;Mocks and explicit contracts&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;寫測試寫到一定程度之後，為了方便建立測試專用的環境，一定會需要用到 mock。而這篇文章雖然已經是多年前發表的，但我覺得他在講怎麼正確使用 mock 講得非常好，尤其是他內文有講到 mock 應該當作名詞而非動詞來用，看完之後覺得又更了解怎麼用 mock 跟 interface 了&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 106 期 DevOps 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/"/>
		<updated>2021-11-09T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/106/smalltown-106/</id>
		<content type="html">
		  &lt;h2 id=&quot;devops&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devops&quot;&gt;#&lt;/a&gt; DevOps&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;just-7-remarkable-k8s-tools-boosting-up-your-effectiveness&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#just-7-remarkable-k8s-tools-boosting-up-your-effectiveness&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://getbetterdevops.io/7-essential-tools-to-be-more-efficient-on-kubernetes/&quot;&gt;Just 7 Remarkable K8S Tools Boosting Up Your Effectiveness&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kubernetes 是目前負責管理 Container 和微服務的的主要平台，一般人在開始學習跟 K8s 互動時都是透過 &lt;code&gt;kubectl&lt;/code&gt;，它的確也真的扮演著很重要的角色，不過不知道使用者是否發現透過他一直在重複著一樣的動作，因而浪費掉寶貴的時間，所以這篇文章要介紹 7 個可以幫助使用者增進效率的工具：&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cloudnativelabs/kube-shell&quot;&gt;Kube-shell&lt;/a&gt;: 透過顯示豐富的資訊和提示來減少使用 kubectl 時可能產生的錯誤並且加快操作速度&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahmetb/kubectx&quot;&gt;Kubectx - Kubens&lt;/a&gt;: 管理 Multi-Cluster 的必備工具，協助使用者切換不同的 Cluster&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/johanhaleby/kubetail&quot;&gt;Kubetail&lt;/a&gt;: 功能有點像是 &lt;code&gt;kubectl logs -f&lt;/code&gt;，但可以一次將多個 Pod 的 Log 同時顯示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahmetb/kubectl-tree&quot;&gt;Kubetree&lt;/a&gt;: K8s 的某些資源間其實是有親子關係的，透過此工具可以將資源間的關係視覺化呈現出來&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/derailed/k9s&quot;&gt;K9S&lt;/a&gt;: K9S 應該就不用多說了，強大的 K8s Terminal UI，讓你可以輕易地與 K8s Cluster 互動&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/robscott/kube-capacity&quot;&gt;Kube-Capacity&lt;/a&gt;: 顯示 K8s Cluster 中 Resource 的 Request, Limit 和使用程度&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://k8slens.dev/&quot;&gt;Lens&lt;/a&gt;: Lens 應該也是大家都耳熟能響的 K8s UI 工具，可以運行在各種系統中 (Windows, Linux 和 Mac)，讓使用者可以透過類似 IDE 的感覺來跟 K8s 互動&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;compliance-in-a-devops-culture&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#compliance-in-a-devops-culture&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://martinfowler.com/articles/devops-compliance.html&quot;&gt;Compliance in a DevOps Culture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;將 Compliance Control 和 Audit 整合進 CI/CD 的流程，對於想要在 DevOps 文化中滿足 Security Compliance 是滿直覺的作法，但根據不同的組織大小會遭遇到不同的挑戰，了解透過不同的實作方式所可能造成的影響是導致成功與否的重要關鍵，文中從理論開始談起 (講解得很細)，隨後提到各種模式，例如：Manual Compliance, Pipeline Compoiance, Composition Compliance 和 Point-of-Change Compliance，對於這塊領域有興趣的人可以參考看看&lt;/p&gt;
&lt;h3 id=&quot;anatomy-of-a-terminal-emulator&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#anatomy-of-a-terminal-emulator&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.poor.dev/blog/terminal-anatomy/&quot;&gt;Anatomy of a Terminal Emulator&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Terminal 是一個無所不在的平台，多年來一直相當穩定地存在著，雖然目前有大量的資源可以用來理解 Terminal 的內部運作方式，但其中大多數要嘛相當的神秘，或是需要特定領域的深入知識，所以這篇文章希望提供一個平易近人且相對廣泛容易了解的內容，來讓大家知道要開發一個 Terminal Emulator 平台時需要具備的知識&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 107 期 前端開發 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/"/>
		<updated>2021-11-16T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/andy-107/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%A9%B2%E5%A6%82%E4%BD%95%E5%85%A5%E9%96%80-ctf-%E4%B8%AD%E7%9A%84-web-%E9%A1%8C%EF%BC%9F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/?fbclid=IwAR2mOQnLA0NF7ukl8XLSBe03Ft2-F9qZR_8l9yj9Mg9H_LcKaCnmZ3FdE0Q&quot;&gt;該如何入門 CTF 中的 Web 題？&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CTF 一直是個很有趣的比賽，參賽者必須要想辦法在網頁上尋找相對應的 flag 或者讓網頁產生一些奇怪的行為，雖然自己身為一位前端工程師但玩了 CTF 才知道自己原來對前端這麼不熟，想要一起了解 CTF 是甚麼的讀者歡迎閱讀這篇文章，之後就可以慢慢摸索一些 CTF 的練習題了！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;custom-elements-defining-new-elements-in-html&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#custom-elements-defining-new-elements-in-html&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.html5rocks.com/en/tutorials/webcomponents/customelements/&quot;&gt;Custom Elements defining new elements in HTML&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;原來 HTML tag 是可以自己隨便定義一個出來的，不一定要是 HTML5 中規範的 tag，其實會突然分享這個文章也是因為上面的 CTF 有些技巧是需要用到這種手段才能達到的，所以假如讀者不知道 HTML tag 可以自己自定義的話也可以看看這篇文章，裡面都有一些作者對於自定義 tag 的見解。&lt;/p&gt;
&lt;h3 id=&quot;css-tricks-to-create-that-dark-futuristic-web3-look&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#css-tricks-to-create-that-dark-futuristic-web3-look&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/trishathecookie/css-tricks-to-create-that-dark-futuristic-web3-look-53bm&quot;&gt;CSS Tricks to Create that Dark Futuristic Web3 Look&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這個真的太酷了，沒想到 CSS 還有這麼多的玩法可以讓一個文字有這麼多不同的顯示方式，學會了這些技巧就不用擔心設計師突然設計出一個難以開發的樣式了XD&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 107 期 前端開發 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/"/>
		<updated>2021-11-16T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/gqsm-107/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;useref-or-usestate%2C-which-is-better%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#useref-or-usestate%2C-which-is-better%3F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/salehmubashar/useref-or-usestate-which-is-better-258j&quot;&gt;useRef or useState, which is better?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;雖然 &lt;code&gt;useRef&lt;/code&gt; 或 &lt;code&gt;useState&lt;/code&gt; 都可以存放想要的東西，在使用上貌似滿雷同的，但其實兩者對 Component render 的影響可是完全不一樣的！會分享這篇文章也是我突然想到 &lt;a href=&quot;https://swr.vercel.app/&quot;&gt;SWR&lt;/a&gt; 就是利用 &lt;code&gt;useRef&lt;/code&gt; 來存放 state 唷！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;writing-clean-code-in-javascript&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#writing-clean-code-in-javascript&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874&quot;&gt;Writing Clean Code in JavaScript&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript 在近幾年真的提供了很多方便的寫法，只要善用就可以讓程式碼變得更簡潔，當然同時也出現了各種古怪的寫法 😂，在使用上還是要考慮到之後的人容不容易看懂。&lt;/p&gt;
&lt;h3 id=&quot;react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#react-router-dom-6.x-%E7%89%88%E6%9C%AC-%E8%AE%A9%E6%88%91%F0%9F%90%93-%F0%9F%90%9D-%E4%BA%86&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://juejin.cn/post/7030700352622034952&quot;&gt;react-router-dom 6.x 版本 让我🐓 🐝 了&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;最近在研究 React 的專案配置時，一如往常地裝了 react-router-dom，然後依照記憶寫下程式碼，結果在執行後卻發現錯誤狂噴，原來是 react-router-dom 更新到 v6 後，一堆寫法都變了，而今天又看到這篇文章就覺得不分享不行，希望之後的人少走一點坑。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 107 期 Go 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/"/>
		<updated>2021-11-16T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/larry-107/</id>
		<content type="html">
		  &lt;h2 id=&quot;go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#go&quot;&gt;#&lt;/a&gt; Go&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;upcoming-features-in-go-1.18&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#upcoming-features-in-go-1.18&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://sebastian-holstein.de/post/2021-11-08-go-1.18-features/&quot;&gt;Upcoming Features in Go 1.18&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;除了泛型之外，預計在明年發布的 Go 1.18 其實還有一些其他 feature，像是用來做測試的 fuzzing、聽說（？）更快的 go fmt，還有新的 net/netip package，看完都等不及要開始用了&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;best-practices-for-testing-in-go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#best-practices-for-testing-in-go&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://fossa.com/blog/golang-best-practices-testing-go/&quot;&gt;Best Practices for Testing in Go&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇文章除了跟你說在寫測試時有哪些該注意的重點之外，也教你怎麼把 function/struct 設計得更好測試，如果你最近想寫 unit test 來增加程式的可靠性，卻發現不知道從何著手，那可以參考看看這篇文章&lt;/p&gt;
&lt;h3 id=&quot;design-patterns-in-go&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#design-patterns-in-go&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://refactoring.guru/design-patterns/go&quot;&gt;Design Patterns in Go&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果想要從 Go 下手開始學習設計模式的話，這邊有一個很不錯的網站，他除了會把每個 pattern 畫成 UML 圖之外，還會給你非常實際的範例，對於理解 pattern 的應用場景非常有幫助&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 107 期 DevOps 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/"/>
		<updated>2021-11-16T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/107/smalltown-107/</id>
		<content type="html">
		  &lt;h2 id=&quot;devops&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devops&quot;&gt;#&lt;/a&gt; DevOps&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#announcing-grafana-oncall%2C-the-easiest-way-to-do-on-call-management&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/&quot;&gt;Announcing Grafana OnCall, the easiest way to do on-call management&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在維運服務時，系統總是會有遇到問題需要求救的時候，設定一個彈性又有效的 On Call 輪值方式是相當重要的一件事情，很多既有的工具使用起來要嘛很麻煩，要嘛對於開發者來說很不友善，所以 Grafana 宣布推出簡單易用的 Grafana On Call 管理工具，用來降低管理 On Call 輪值所需要的功夫，目前在 Grafana Cloud 為 Beta 公測階段；Grafana On Call 主要是透過今年所收購 Amixr Inc 所開發出來的，而他主要有以下三個特點：&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;ul&gt;
&lt;li&gt;簡單建立跟管理 On-Call 時程&lt;/li&gt;
&lt;li&gt;利用自動逐步升級 (Escalation)且彈性的引導方式 (Routing) 確保找到人協助系統問題&lt;/li&gt;
&lt;li&gt;讓 On-Call 與 Incidnet 的狀態在同一個 UI 中顯現管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;terraform-cloud-variable-sets-beta-now-available&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#terraform-cloud-variable-sets-beta-now-available&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available&quot;&gt;Terraform Cloud Variable Sets Beta Now Available&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Terraform 的 Module 引用方式讓使用者可以一直重複利用既有的程式碼，而不需要重新造輪子，而現在 Terraform Cloud 針對變數也推出一樣的功能 - &lt;code&gt;variable sets&lt;/code&gt;，他讓使用者可以重複使用 Terraform 所定義或是環境變數，而且不止是從 Root 到 Child Module，還可以橫跨某些 Workspaces 甚至是 Organization；自己發現 Terragrunt 也有類似的功能，看來 Terraform 這邊也跟上來了&lt;/p&gt;
&lt;h3 id=&quot;flux-security-audit-has-concluded&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#flux-security-audit-has-concluded&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.cncf.io/blog/2021/11/11/flux-security-audit-has-concluded/&quot;&gt;Flux Security Audit has concluded&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CNCF 最近對旗下 Incubation Project 進行 Security Audit，做完馬上發現一個 CVE: CVE-2021-41254，可以讓有心人士可以在 Multi-Tenant Flux 提權成 Cluster Admin (有使用 Flux 的人要記得升級)，而整個詳細的&lt;a href=&quot;https://fluxcd.io/FluxFinalReport-v1.1.pdf&quot;&gt;稽核報告&lt;/a&gt;已經被公開在網路上，找到將近 22 條涵括各種不同的 Risk Level 的問題，目前 43% 的 Issue 在 TODO 階段，21% WIP，36% 已經修完，詳細的進度可以參考 &lt;a href=&quot;https://github.com/orgs/fluxcd/projects/5&quot;&gt;GitHub Project&lt;/a&gt;，看起來 Flux 從另外一個面向投入資源，試圖跟其他的 GitOps 競爭工具做出差異化&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 108 期 前端開發 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/"/>
		<updated>2021-11-23T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/gqsm-108/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#react-%E7%9A%84%E6%9C%AA%E4%BE%86%EF%BC%9A18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://chentsulin.medium.com/react-%E7%9A%84%E6%9C%AA%E4%BE%86-18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C-d5764e258deb&quot;&gt;React 的未來：18 以及在那之後&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇文章的作者先前有在 JSDC 2021 分享過 &lt;a href=&quot;https://2021.jsdc.tw/timesheets&quot;&gt;The Future of React: 18 and Beyond&lt;/a&gt;，然後又很佛的把議程的內容另外寫成一篇文章分享，雖然 React 18 目前還在 beta 狀態，但還是可以先看看 React 18 新 feature 的概念。&#39;&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;creating-a-react-custom-hook-using-tdd&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#creating-a-react-custom-hook-using-tdd&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://dev.to/mbarzeev/creating-a-react-custom-hook-using-tdd-2o&quot;&gt;Creating a React Custom Hook using TDD&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;作者用 TDD 的方式設計一個 Custom Hook 用來管理分頁 Component 的背後邏輯，每一步操作都有很清楚的說明，雖然文章篇幅很長，但如果想要學習測試還是很推薦看完！&lt;/p&gt;
&lt;h3 id=&quot;functional-programming%3A-immutability&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#functional-programming%3A-immutability&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://rehansattar.dev/functional-programming-immutability&quot;&gt;Functional Programming: Immutability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Immutability（不變性） 在 Functional Programming 中是個相當重要的觀念，作者用簡單的例子示範什麼是 Immutability 的概念，並清楚的解釋 Immutability 帶來的好處和壞處。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 108 期 Rust 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/"/>
		<updated>2021-11-23T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/larry-108/</id>
		<content type="html">
		  &lt;h2 id=&quot;rust&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#rust&quot;&gt;#&lt;/a&gt; Rust&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;supercharge-your-nodejs-with-rust&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#supercharge-your-nodejs-with-rust&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://skwee357.medium.com/supercharge-your-nodejs-with-rust-f78952d2fa8&quot;&gt;Supercharge your NodeJS with Rust&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Rust 開發起來很慢，光是要成功編譯就不行，但執行速度非常的快；而 Node.js 則是開發起來很快，但執行速度相對就慢很多。那有什麼什麼方法可以將兩者結合起來呢？這篇文章介紹了 Neon，他可以幫你把 Rust 程式碼編譯成 native Node.js module，這樣你就可以把最需要效能的地方用 Rust 寫，接著 Node.js 裡面使用它就能兼顧開發效率跟效能囉&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;what-rust-could-learn-from-kotlin&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#what-rust-could-learn-from-kotlin&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d&quot;&gt;What Rust could learn from Kotlin&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這十多年來程式語言如雨後春筍般不斷推陳出新，像 Kotlin、Swift、Golang 這些語言其實都設計得不錯。而這篇文章就比較了 Rust 跟 Kotlin 的語法，並指出 Rust 有哪些可以跟 Kotlin 借鏡的地方。如果你跟我一樣也喜歡看看每個語言的優缺點的話，這篇文章真的很不錯&lt;/p&gt;
&lt;h3 id=&quot;rust-lang-tips-and-tricks&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#rust-lang-tips-and-tricks&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://mudit.blog/rust-tips-and-tricks/&quot;&gt;Rust lang Tips and Tricks&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇文章介紹了一些 Rust 的小技巧，像是怎麼用 &lt;code&gt;dbg!&lt;/code&gt; macro 來輸出變數、用底線來讓數字更好讀等等，如果才剛開始學習 Rust 還不太熟悉一些語法糖，可以簡單看一看這篇文章～&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 108 期 DevOps 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/smalltown-108/"/>
		<updated>2021-11-23T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/108/smalltown-108/</id>
		<content type="html">
		  &lt;h2 id=&quot;devops&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devops&quot;&gt;#&lt;/a&gt; DevOps&lt;/h2&gt;
&lt;h3 id=&quot;crisp%3A-critical-path-analysis-for-microservice-architectures&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#crisp%3A-critical-path-analysis-for-microservice-architectures&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://eng.uber.com/crisp-critical-path-analysis-for-microservice-architectures/&quot;&gt;CRISP: Critical Path Analysis for Microservice Architectures&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Uber 的後端系統算是 MicroService 架構的榜樣，其中有數千個 MicroService 透過 RPC 的方式跟其他服務進行溝通，所以當服務請求發生時，就很像是網路傳遞時會有數個 hops 一樣，當數個 MicroService 都正常時，這個服務請求才能夠運行成功，其過程是相當複雜的，可能隱含很多的動作，非同步..等，所以當要追查一個服務請求點到點的品質時，可以想像是相當困難的，所以 Uber 開發了一個叫做 CRISP 的工具，用來解決追蹤複雜服務請求中到底是哪一個環節出了問題，CRISP 主要使用 Jaeger 這個 RPC 的追蹤工具，對於此主題有興趣的人，可以查看原文獲得更仔細的資訊&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;cloudquery&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#cloudquery&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://github.com/cloudquery/cloudquery&quot;&gt;cloudquery&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;CloudQuery 可以將在雲端的資源資訊給萃取出來，將其轉化為 PostgreSQL Table 的資料，主要的使用情境有底下三種：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search: 使用標準的 SQL 語法去搜尋雲端資源&lt;/li&gt;
&lt;li&gt;Visualize:將資料透過 BI 或是視覺化工具呈現出來，例如 Grafana, QuickSight...等&lt;/li&gt;
&lt;li&gt;Policy as Code: 將 Security 和 Compliance 規則寫成 SQL 語法用以達成 PaC&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;prometheus-announces-an-agent-to-address-a-new-range-of-use-cases&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#prometheus-announces-an-agent-to-address-a-new-range-of-use-cases&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://www.cncf.io/blog/2021/11/16/prometheus-announces-an-agent-to-address-a-new-range-of-use-cases/&quot;&gt;Prometheus announces an Agent to address a new range of use cases&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;一直以來 Prometheus 都是使用 Pull 的模式，透過 Prometheus Server 把來自各方的資料做彙整，而最近宣佈了新的模式 Agent Mode，Prometheus Agent 跟 Prometheus Server 其實有點像，他還是透過 Pull 去抓取 HTTP 所暴露的 Metric 資料，然後使用 Remote Write 的方式將資料送到遠端的 Prometheus Server，不過 Metric 資料並不會儲存在本地端，送出去後就會立即移除掉，希望可以應用在某些應用情境上，例如 Edge Networks 和 IoT&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>DevOpsDays Taipei 2021</title>
		<link href="https://starbugs-blog.netlify.app/posts/conference/20211120-DevOpsDay-2021/"/>
		<updated>2021-11-24T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/conference/20211120-DevOpsDay-2021/</id>
		<content type="html">
		  &lt;p&gt;DevOpsDays Taipei 2021 即將在 2021/11/24 於臺北文創盛大舉辦，Agile Community tw、DevOps Taiwan Community、HashiCorp User Group Taipei 以及 iThome 再次攜手合作，期盼再創屬於臺灣在地的 DevOps 高峰盛會。&lt;/p&gt;
&lt;h2 id=&quot;devopsdays-taipei&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devopsdays-taipei&quot;&gt;#&lt;/a&gt; DevOpsDays Taipei&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;p&gt;DevOpsDays Taipei 是由臺灣在地技術社群發起，結合社群、企業共同舉辦之年度 DevOps 盛會。DevOpsDays 由 DevOps 之父 Patrick Debois 發源自比利時，經過全球社群的共同響應，如今在全球，每年皆有多個城市舉辦以城市掛名的 DevOpsDays。&lt;/p&gt;
&lt;p&gt;根據 iThome 的報導，不論是國內外的知名企業例如台積電、金士頓、趨勢科技、國泰金控等皆早已擁抱 DevOps，引領企業持續改善、邁向新一波的 IT 數位轉型。DevOps 作為同時蘊含技術與文化轉型雙主軸的 IT 熱門關鍵字，其影響力已不僅是 IT 圈內人人皆知，更擴展至企業組織的各個層面。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%82%A8%E7%B5%95%E5%B0%8D%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E&quot;&gt;#&lt;/a&gt; 您絕對不能錯過&lt;/h3&gt;
&lt;p&gt;臺灣今年度最大場 DevOpsDays 官方授權活動&lt;br&gt;
專業技術論壇、解決方案 Demo、實機體驗工作坊讓您值回票價&lt;br&gt;
囊括最多產業案例及導入實戰分享&lt;br&gt;
議程後還有專家面對面時間讓您與大神近距離討教&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://devopsdays.tw/&quot;&gt;DevOpsDays TW 活動頁面&lt;/a&gt;&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 109 期 前端開發 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/gqsm-109/"/>
		<updated>2021-11-30T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/gqsm-109/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC&quot;&gt;#&lt;/a&gt; 前端開發&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;i-made-a-working-gameboy-css-art%3A-try-it-out-%F0%9F%95%B9&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#i-made-a-working-gameboy-css-art%3A-try-it-out-%F0%9F%95%B9&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://theangularguy.hashnode.dev/i-made-a-working-gameboy-css-art-try-it-out#comments-list&quot;&gt;I made a working Gameboy CSS art: try it out 🕹&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;如果無法弄到一台真正的 Gameboy 來邊玩邊懷舊，不如就看著這篇文章自己寫一個 Gameboy 吧！雖然文章中沒有提及所有程式碼的解釋，但是作者也挑了幾個像是遊戲的演算法或 CSS 等關鍵的觀念解釋，真的手癢的話就直接 fork 下來改一波吧！&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;rematch---a-better-redux%3F&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#rematch---a-better-redux%3F&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.openreplay.com/rematch-a-better-redux&quot;&gt;Rematch - a better Redux?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rematch/rematch&quot;&gt;Rematch&lt;/a&gt; 是基於 Redux 的狀態管理器，但又移除了一些 Redux 所需的東西！像是不再使用 middleware，而是直接內建同步操作的 &lt;code&gt;effects&lt;/code&gt; 等，還有更多其他的就到文章裡看作者介紹吧！&lt;/p&gt;
&lt;h3 id=&quot;oops-in-javascript-with-easy-to-understand-examples-%F0%9F%94%A5%F0%9F%94%A5&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#oops-in-javascript-with-easy-to-understand-examples-%F0%9F%94%A5%F0%9F%94%A5&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://nehalmahida.hashnode.dev/oops-in-javascript-with-easy-to-understand-examples&quot;&gt;OOPS in JavaScript with easy to understand examples 🔥🔥&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;這篇文章的介紹該如何在 JavaScript 內使用 OOP（Object-oriented programming）的各種觀念，其中包含了 Object、Class、Encapsulation 和 Abstraction 等使用方法，非常適合想要了解如何在 JavaScript 使用 OOP 的開發者閱讀！&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 109 期 職涯規劃 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/larry-109/"/>
		<updated>2021-11-30T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/larry-109/</id>
		<content type="html">
		  &lt;h2 id=&quot;%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E8%81%B7%E6%B6%AF%E8%A6%8F%E5%8A%83&quot;&gt;#&lt;/a&gt; 職涯規劃&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E4%B8%80%E5%80%8B%E8%B3%87%E6%B7%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%B9%B4%E6%9C%AB%E7%9A%84%E8%87%AA%E6%88%91%E7%9C%81%E8%A6%96&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E4%B8%80%E5%80%8B%E8%B3%87%E6%B7%BA%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%B9%B4%E6%9C%AB%E7%9A%84%E8%87%AA%E6%88%91%E7%9C%81%E8%A6%96&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://blog.techbridge.cc/2016/12/31/review-2016/&quot;&gt;一個資淺工程師年末的自我省視&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;不知不覺今年好像又快過完了，大家有在做年終回顧的習慣嗎？沒有的話也沒關係&lt;/p&gt;
&lt;p&gt;在學習技術時，我們很常會猶豫到底是要花時間在技術的深度還是廣度上，而在挑選工作時，也很常會不知道該去大公司還是小公司，這兩個問題其實都沒有標準答案，但除了自己思考之外，也可以參考看看別人是怎麼想的。像胡立這篇年末省視就就講到很多他自己的成長歷程，不管你是想轉換領域、換工作、或只是想做點事情跳出舒適圈，這篇文章都很值得看看。&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;%E5%A6%82%E4%BD%95%E6%89%8D%E6%9C%89%E8%B3%87%E6%A0%BC%E7%A8%B1%E7%82%BA%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E5%A6%82%E4%BD%95%E6%89%8D%E6%9C%89%E8%B3%87%E6%A0%BC%E7%A8%B1%E7%82%BA%E8%B3%87%E6%B7%B1%E5%B7%A5%E7%A8%8B%E5%B8%AB&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://jaceju.net/be-a-senior-engineer/&quot;&gt;如何才有資格稱為資深工程師&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;關於到底怎麼樣才算是「資深工程師」其實有非常多不同的意見，所以除了看這週專欄之外，也可以參考看看這篇文章，他除了講了非常多資深工程師該有的特質之外，同時還提供了反指標，讓你可以檢驗自己（或身邊的同事XD）。&lt;/p&gt;
&lt;h3 id=&quot;%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E7%9A%84%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E7%9A%84%E5%8F%91%E5%B1%95%E4%B9%8B%E8%B7%AF&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://coolshell.cn/articles/17583.html&quot;&gt;技术人员的发展之路&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;身為一個工程師，我以前其實都沒有在做什麼太長遠的職涯規劃XD，但看了這篇文章之後突然覺得好像該好好的想一下，畢竟以後的路還長，想去怎麼樣的公司、過怎麼樣的人生，如果沒有提早規劃好的話，可能一不小心就會錯過機會，所以當然要趁年輕時，提早想好自己的路。&lt;/p&gt;

		</content>
	</entry>
	
	<entry>
		<title>第 109 期 DevOps 推薦文章</title>
		<link href="https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/smalltown-109/"/>
		<updated>2021-11-30T00:00:00-00:00</updated>
		<id>https://starbugs-blog.netlify.app/posts/starbugs-weekly/109/smalltown-109/</id>
		<content type="html">
		  &lt;h2 id=&quot;devops&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#devops&quot;&gt;#&lt;/a&gt; DevOps&lt;/h2&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;infrastructure-as-code%3A-the-next-big-shift-is-here&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#infrastructure-as-code%3A-the-next-big-shift-is-here&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://itnext.io/infrastructure-as-code-the-next-big-shift-is-here-9215f0bda7ce&quot;&gt;Infrastructure as Code: the next big shift is here&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;軟體架構一直在演進，不管是在 Provision，Delivery 或是 Maintenance 的方式都一直在進化中，而 Infrastructure as Code 尤其是如何，他可以將整個架構視覺化並且去補助服務的運行，而且這一切可以透過任何的語言，並且將其儲存在 Version Control 的 Repository 之中，而究竟 IaC 是如何走到今天這樣的面貌的呢？作者認為有幾個重要的階段，分別為...，文章中透過生動可愛的漫畫對每一個階段做詳細地說明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtualization&lt;/li&gt;
&lt;li&gt;Containerisation and containers orchestration&lt;/li&gt;
&lt;li&gt;Public Cloud Infrastructure&lt;/li&gt;
&lt;li&gt;DevOps Culture&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;how-to-level-up-your-kubernetes-game&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#how-to-level-up-your-kubernetes-game&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://itnext.io/how-to-level-up-your-kubernetes-game-96f8f7ea50b9&quot;&gt;How To Level Up Your Kubernetes Game&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根據 Cloud Native Survey 2020 的調查顯示 Container 在 Production 環境的使用成長的三倍，因此 Kubernetes 的使用率只會升不會降，但使用 K8s 和擴展他是兩回事，K8s 設計是用來構建平台的平台，他的不僅僅只是用來管理 Container 而已，他的 API 和 Contril Plane 都是可擴展的，例如 K8s 的 Operator 和 Control Loop 都可以用來擴展 K8s，所以這篇文章想要介紹 Operator Pattern，讓大家一起學習如何適當地使用 Opertoar，並探索 Operator 的架構&lt;/p&gt;
&lt;!-- summary --&gt;
&lt;h3 id=&quot;dstp&quot;&gt;&lt;a class=&quot;direct-link&quot; href=&quot;#dstp&quot;&gt;#&lt;/a&gt; &lt;a href=&quot;https://github.com/ycd/dstp&quot;&gt;dstp&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;當有辦公室有人跟你說某個網站不能連時，你下意識會做什麼事情？使用 nslookup 或是 curl 嗎？現在你有更好的選擇 - dstp！這個 CLI 小工具可以幫你幫目標網站做常見的網路測試，包含 ping, DNS, TLS 和 HTTP 的檢查，讓你使用單一個工具就可以做完所有的檢查，不用在使用多個工具東查西查的&lt;/p&gt;

		</content>
	</entry>
</feed>
